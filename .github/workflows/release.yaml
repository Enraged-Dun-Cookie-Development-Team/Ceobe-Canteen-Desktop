name: Build/release

on:
  push:
    branches:
      - release

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result.id }}
      upload_url: ${{ steps.create-release.outputs.result.upload_url }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `CeobeCanteenDesktop v${process.env.PACKAGE_VERSION}`,
              draft: true,
              prerelease: false
            })
            return data

  release:
    runs-on: ${{ matrix.os }}
    needs:
      - create-release

    strategy:
      matrix:
        os:
          # - macos-latest
          # - ubuntu-latest
          - windows-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}
          build_script_name: 'electron:build'
          use_vue_cli: true
          skip_build: true
          release: true

      - name: get version
        id: get-version
        run: node -p "require('./package.json').version"

      - name: execute
        id: execute-file
        if: startsWith(matrix.platform, 'windows')
        run: echo "${{steps.release.get-version.outputs.result}}.exe"

      - name: find executable file(win)
        if: startsWith(matrix.platform, 'windows')
        run: echo "INSTALL_PACKAGE=./dist_electron/ceobe-canteen-electron Setup ${{steps.release.get-version.outputs.result}}.exe" >> $GITHUB_ENV

      - name: upload release assert
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: "${{needs.create-release.outputs.release_id}}" ,
                name: "${{ matrix.platform }}-CeobeCanteenDesktop-${{ steps.release.execute-file.outputs.result }}",
                data: await fs.readFileSync(process.env.INSTALL_PACKAGE)
            })

      # upload build test reports
      - name: Publish reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: electron-build-reports-${{ runner.os }}
          path: /home/runner/.npm/_logs/
  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, release]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
