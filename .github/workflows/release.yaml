name: Build/release

on:
  push:
    branches:
      - release

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `CeobeCanteenDesktop v${process.env.PACKAGE_VERSION}`,
              draft: true,
              prerelease: false
            })
            return data.id

  release:
    runs-on: ${{ matrix.os }}
    needs:
      - create-release

    strategy:
      matrix:
        os:
          # - macos-10.15
          # - ubuntu-20.04
          - windows-2022

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: install dependence
        run: npm install

      - name: build app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run electron:build

      - name: upload release assert
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            let extension;
            if (process.platform === "win32"){
              extension = ".exe"
            }else if (process.platform === "darwin"){
              extension = ".dmg"
            }else{
              extension = ".deb"
            }
            const file = (await fs.promises.readdir("./dist_electron",{withFileTypes:true}))
            .filter(dirent => dirent.isFile() && dirent.name.endsWith(extension))[0];
            const version = require('./package.json').version;
            const name = `CeobeCanteenDesktop-${version}${extension}`
            const filename = `./dist_electron/${file}`
            const fs = require('fs');

            console.log(`uploading ${process.env.release_id} | ${name} | ${filename}`)

            await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.release_id ,
                name,
                data: await fs.readFileSync(filename)
            })

      # upload build test reports
      - name: Publish reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: electron-build-reports-${{ runner.os }}
          path: /home/runner/.npm/_logs/
  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, release]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
