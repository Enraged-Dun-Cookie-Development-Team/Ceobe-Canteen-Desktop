name: Build/release

on:
  push:
    branches:
      - release

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const tags = (await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })).data.map((tag) => tag.name);
            const tagName = `app-v${process.env.PACKAGE_VERSION}`;

            console.log(`${tags} check is contain ${tagName}`);

            if (tags.includes(tagName)){
              core.setFailed(`tag name '${tagName}' Exist`);
              return null;
            }
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `CeobeCanteenDesktop v${process.env.PACKAGE_VERSION}`,
              draft: true,
              prerelease: false
            })
            return data.id

  release:
    runs-on: ${{ matrix.os }}
    needs:
      - create-release

    strategy:
      matrix:
        os:
          - macos-latest
          # - ubuntu-latest
          # - windows-latest
      fail-fast: false
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: install py2.7 for macos
        uses: actions/setup-python@v4
        if: ${{ matrix.os == 'macos-latest' }}
        id: setup-py
        with:
          python-version: 'pypy2.7'

      - name: install dependence
        run: npm install
      - name: install dmg-license
        if: ${{ matrix.os == 'macos-latest' }}
        run: npm i dmg-license

      - name: build app for macos
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          PYTHON_PATH: ${{ steps.setup-py.outputs.python-path }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run electron:build

      - name: build app
        if: ${{ matrix.os != 'macos-latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run electron:build

      - run: npm install archiver && ls -al ./dist_electron
      - name: upload release assert
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            const fs = require('fs');
            const archiver = require('archiver');
            let extension, hasPortable;
            if (process.platform === "win32"){
              extension = ".exe"
              hasPortable = true
            }else if (process.platform === "darwin"){
              extension = ".dmg"
              hasPortable = false
            }else{
              extension = ".deb"
              hasPortable = true
            }

            console.log(`find executable file ${extension}`)

            // 可执行文件 release
            const file = (await fs.promises.readdir("./dist_electron",{withFileTypes:true}))
            .filter(dirent => dirent.isFile() && dirent.name.endsWith(extension))[0].name;

            console.log(`find executable file ${file}`)

            const version = require('./package.json').version;
            const name = `CeobeCanteenDesktop-${version}${extension}`
            const filename = `./dist_electron/${file}`

            console.log(`uploading ${process.env.release_id} | ${name} | ${filename}`)

            await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.release_id ,
                name,
                data: await fs.readFileSync(filename)
            })

            // 免安装版 release
            //找到 *-unpacked 文件夹
            if (hasPortable) {
              const portable = (await fs.promises.readdir("./dist_electron",{withFileTypes:true}))
              .filter(dirent => dirent.isDirectory() && dirent.name.endsWith("-unpacked"))[0].name;

              console.log(`find portable file ${portable}`)

              const archive = archiver('zip', {
                zlib: { level: 9 } // Sets the compression level.
              });

              const portableName = `CeobeCanteenDesktop-${version}-portable-${process.platform}.zip`
              const portablePath = `./dist_electron/${portableName}`

              archive.on("error", (err) => {
                throw err;
              });
              archive.on("close", async () => {
                console.log(`uploading ${process.env.release_id} | ${portableName} | ${portablePath}`)
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: process.env.release_id ,
                  name: portableName,
                  data: fs.readFileSync(portablePath)
                })
              });
              archive.pipe(fs.createWriteStream(portablePath));
              archive.directory(`./dist_electron/${portable}`, false);
              archive.finalize();
            }
  
      # upload build test reports
      - name: Publish reports
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: electron-build-reports-${{ runner.os }}
          path: /home/runner/.npm/_logs/

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, release]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })

  remove-failure-release:
    runs-on: ubuntu-20.04
    needs:
      - release
      - create-release
    if: ${{ failure() }}

    steps:
      - name: publish release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            const releaseId = process.env.release_id;
            if ( releaseId ){
            github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
            })
            }
